@page "/"

<div class="clocks-wrapper">
    @* hour fist digit *@
    <div class="clock-container hours">
        <div class="clock">
            <div class="hour"
                style="transform:rotate(@(controller != null ? controller.Clocks[1].FirstArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <div class="minute"
                style="transform:rotate(@(controller != null ? controller.Clocks[1].SecondArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <span class="ctr"></span>
        </div>
        <div class="clock">
            <div class="hour"
                style="transform:rotate(@(controller != null ? controller.Clocks[2].FirstArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <div class="minute"
                style="transform:rotate(@(controller != null ? controller.Clocks[2].SecondArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <span class="ctr"></span>
        </div>
        <div class="clock">
            <div class="hour"
                style="transform:rotate(@(controller != null ? controller.Clocks[3].FirstArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <div class="minute"
                style="transform:rotate(@(controller != null ? controller.Clocks[3].SecondArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <span class="ctr"></span>
        </div>
    </div>
    <div class="clock-container">
        <div class="clock">
            <div class="hour"
                style="transform:rotate(@(controller != null ? controller.Clocks[4].FirstArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <div class="minute"
                style="transform:rotate(@(controller != null ? controller.Clocks[4].SecondArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <span class="ctr"></span>
        </div>
        <div class="clock">
            <div class="hour"
                style="transform:rotate(@(controller != null ? controller.Clocks[5].FirstArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <div class="minute"
                style="transform:rotate(@(controller != null ? controller.Clocks[5].SecondArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <span class="ctr"></span>
        </div>
        <div class="clock">
            <div class="hour"
                style="transform:rotate(@(controller != null ? controller.Clocks[6].FirstArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <div class="minute"
                style="transform:rotate(@(controller != null ? controller.Clocks[6].SecondArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <span class="ctr"></span>
        </div>
    </div>
    @* hour second digit *@
    <div class="clock-container">
        <div class="clock">
            <div class="hour"
                style="transform:rotate(@(controller != null ? controller.Clocks[7].FirstArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <div class="minute"
                style="transform:rotate(@(controller != null ? controller.Clocks[7].SecondArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <span class="ctr"></span>
        </div>
        <div class="clock">
            <div class="hour"
                style="transform:rotate(@(controller != null ? controller.Clocks[8].FirstArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <div class="minute"
                style="transform:rotate(@(controller != null ? controller.Clocks[8].SecondArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <span class="ctr"></span>
        </div>
        <div class="clock">
            <div class="hour"
                style="transform:rotate(@(controller != null ? controller.Clocks[9].FirstArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <div class="minute"
                style="transform:rotate(@(controller != null ? controller.Clocks[9].SecondArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <span class="ctr"></span>
        </div>
    </div>
    <div class="clock-container">
        <div class="clock">
            <div class="hour"
                style="transform:rotate(@(controller != null ? controller.Clocks[10].FirstArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <div class="minute"
                style="transform:rotate(@(controller != null ? controller.Clocks[10].SecondArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <span class="ctr"></span>
        </div>
        <div class="clock">
            <div class="hour"
                style="transform:rotate(@(controller != null ? controller.Clocks[11].FirstArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <div class="minute"
                style="transform:rotate(@(controller != null ? controller.Clocks[11].SecondArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <span class="ctr"></span>
        </div>
        <div class="clock">
            <div class="hour"
                style="transform:rotate(@(controller != null ? controller.Clocks[12].FirstArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <div class="minute"
                style="transform:rotate(@(controller != null ? controller.Clocks[12].SecondArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <span class="ctr"></span>
        </div>
    </div>
    @* minute first digit *@
    <div class="clock-container">
        <div class="clock">
            <div class="hour"
                style="transform:rotate(@(controller != null ? controller.Clocks[13].FirstArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <div class="minute"
                style="transform:rotate(@(controller != null ? controller.Clocks[13].SecondArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <span class="ctr"></span>
        </div>
        <div class="clock">
            <div class="hour"
                style="transform:rotate(@(controller != null ? controller.Clocks[14].FirstArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <div class="minute"
                style="transform:rotate(@(controller != null ? controller.Clocks[14].SecondArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <span class="ctr"></span>
        </div>
        <div class="clock">
            <div class="hour"
                style="transform:rotate(@(controller != null ? controller.Clocks[15].FirstArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <div class="minute"
                style="transform:rotate(@(controller != null ? controller.Clocks[15].SecondArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <span class="ctr"></span>
        </div>
    </div>
    <div class="clock-container">
        <div class="clock">
            <div class="hour"
                style="transform:rotate(@(controller != null ? controller.Clocks[16].FirstArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <div class="minute"
                style="transform:rotate(@(controller != null ? controller.Clocks[16].SecondArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <span class="ctr"></span>
        </div>
        <div class="clock">
            <div class="hour"
                style="transform:rotate(@(controller != null ? controller.Clocks[17].FirstArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <div class="minute"
                style="transform:rotate(@(controller != null ? controller.Clocks[17].SecondArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <span class="ctr"></span>
        </div>
        <div class="clock">
            <div class="hour"
                style="transform:rotate(@(controller != null ? controller.Clocks[18].FirstArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <div class="minute"
                style="transform:rotate(@(controller != null ? controller.Clocks[18].SecondArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <span class="ctr"></span>
        </div>
    </div>
    @* minute second digit *@
    <div class="clock-container">
        <div class="clock">
            <div class="hour"
                style="transform:rotate(@(controller != null ? controller.Clocks[19].FirstArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <div class="minute"
                style="transform:rotate(@(controller != null ? controller.Clocks[19].SecondArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <span class="ctr"></span>
        </div>
        <div class="clock">
            <div class="hour"
                style="transform:rotate(@(controller != null ? controller.Clocks[20].FirstArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <div class="minute"
                style="transform:rotate(@(controller != null ? controller.Clocks[20].SecondArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <span class="ctr"></span>
        </div>
        <div class="clock">
            <div class="hour"
                style="transform:rotate(@(controller != null ? controller.Clocks[21].FirstArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <div class="minute"
                style="transform:rotate(@(controller != null ? controller.Clocks[21].SecondArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <span class="ctr"></span>
        </div>
    </div>
    <div class="clock-container">
        <div class="clock">
            <div class="hour"
                style="transform:rotate(@(controller != null ? controller.Clocks[22].FirstArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <div class="minute"
                style="transform:rotate(@(controller != null ? controller.Clocks[22].SecondArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <span class="ctr"></span>
        </div>
        <div class="clock">
            <div class="hour"
                style="transform:rotate(@(controller != null ? controller.Clocks[23].FirstArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <div class="minute"
                style="transform:rotate(@(controller != null ? controller.Clocks[23].SecondArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <span class="ctr"></span>
        </div>
        <div class="clock">
            <div class="hour"
                style="transform:rotate(@(controller != null ? controller.Clocks[24].FirstArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <div class="minute"
                style="transform:rotate(@(controller != null ? controller.Clocks[24].SecondArm.CurrentState : 0)deg);">
                <div></div>
            </div>
            <span class="ctr"></span>
        </div>
    </div>
</div>

@code {
    public delegate void UpdateStateCallback();
    Controller? controller;
    System.Threading.Timer timer;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        controller = new Controller(StateHasChanged);

        timer = new System.Threading.Timer(controller.SetClock, new System.Threading.AutoResetEvent(false), 0, 10);
    }

    public static double ArmStateToDegree(ArmState state)
    {
        switch (state)
        {
            case ArmState.Zero:
                return 0.0;
            case ArmState.Three:
                return 90.0;
            case ArmState.Six:
                return 180.0;
            case ArmState.Nine:
                return 270.0;
            case ArmState.None:
                return 225.0;
            case ArmState.HPOne:
                return 45.0;
            default: return 0;
        }
    }

    public static bool SetNumber(int number, List<int> clockIndexes, Dictionary<int, Clock> clocks)
    {
        var completed = true;
        var result = false;
        switch (number)
        {
            case 0:
                result = clocks[clockIndexes[0]].UpdateState(ArmState.Three, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[1]].UpdateState(ArmState.Zero, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[2]].UpdateState(ArmState.Zero, ArmState.Three);
                completed = completed && result;
                result = clocks[clockIndexes[3]].UpdateState(ArmState.Nine, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[4]].UpdateState(ArmState.Zero, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[5]].UpdateState(ArmState.Zero, ArmState.Nine);
                completed = completed && result;
                break;

            case 1:
                result = clocks[clockIndexes[0]].UpdateState(ArmState.None, ArmState.None);
                completed = completed && result;
                result = clocks[clockIndexes[1]].UpdateState(ArmState.None, ArmState.None);
                completed = completed && result;
                result = clocks[clockIndexes[2]].UpdateState(ArmState.None, ArmState.None);
                completed = completed && result;
                result = clocks[clockIndexes[3]].UpdateState(ArmState.Six, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[4]].UpdateState(ArmState.Zero, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[5]].UpdateState(ArmState.Zero, ArmState.Zero);
                completed = completed && result;
                break;

            case 2:
                result = clocks[clockIndexes[0]].UpdateState(ArmState.Three, ArmState.Three);
                completed = completed && result;
                result = clocks[clockIndexes[1]].UpdateState(ArmState.Three, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[2]].UpdateState(ArmState.Zero, ArmState.Three);
                completed = completed && result;
                result = clocks[clockIndexes[3]].UpdateState(ArmState.Nine, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[4]].UpdateState(ArmState.Zero, ArmState.Nine);
                completed = completed && result;
                result = clocks[clockIndexes[5]].UpdateState(ArmState.Nine, ArmState.Nine);
                completed = completed && result;
                break;

            case 3:
                result = clocks[clockIndexes[0]].UpdateState(ArmState.Three, ArmState.Three);
                completed = completed && result;
                result = clocks[clockIndexes[1]].UpdateState(ArmState.Three, ArmState.Three);
                completed = completed && result;
                result = clocks[clockIndexes[2]].UpdateState(ArmState.Three, ArmState.Three);
                completed = completed && result;
                result = clocks[clockIndexes[3]].UpdateState(ArmState.Nine, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[4]].UpdateState(ArmState.Zero, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[5]].UpdateState(ArmState.Zero, ArmState.Nine);
                completed = completed && result;
                break;

            case 4:
                result = clocks[clockIndexes[0]].UpdateState(ArmState.Six, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[1]].UpdateState(ArmState.Zero, ArmState.Three);
                completed = completed && result;
                result = clocks[clockIndexes[2]].UpdateState(ArmState.None, ArmState.None);
                completed = completed && result;
                result = clocks[clockIndexes[3]].UpdateState(ArmState.Six, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[4]].UpdateState(ArmState.Nine, ArmState.Zero);
                completed = completed && result;
                result = clocks[clockIndexes[5]].UpdateState(ArmState.Zero, ArmState.Zero);
                completed = completed && result;
                break;

            case 5:
                result = clocks[clockIndexes[0]].UpdateState(ArmState.Three, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[1]].UpdateState(ArmState.Zero, ArmState.Three);
                completed = completed && result;
                result = clocks[clockIndexes[2]].UpdateState(ArmState.Three, ArmState.Three);
                completed = completed && result;
                result = clocks[clockIndexes[3]].UpdateState(ArmState.Nine, ArmState.Nine);
                completed = completed && result;
                result = clocks[clockIndexes[4]].UpdateState(ArmState.Nine, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[5]].UpdateState(ArmState.Zero, ArmState.Nine);
                completed = completed && result;
                break;

            case 6:
                result = clocks[clockIndexes[0]].UpdateState(ArmState.Three, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[1]].UpdateState(ArmState.Zero, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[2]].UpdateState(ArmState.Zero, ArmState.Three);
                completed = completed && result;
                result = clocks[clockIndexes[3]].UpdateState(ArmState.Nine, ArmState.Nine);
                completed = completed && result;
                result = clocks[clockIndexes[4]].UpdateState(ArmState.Nine, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[5]].UpdateState(ArmState.Zero, ArmState.Nine);
                completed = completed && result;
                break;

            case 7:
                result = clocks[clockIndexes[0]].UpdateState(ArmState.Three, ArmState.Three);
                completed = completed && result;
                result = clocks[clockIndexes[1]].UpdateState(ArmState.None, ArmState.None);
                completed = completed && result;
                result = clocks[clockIndexes[2]].UpdateState(ArmState.None, ArmState.None);
                completed = completed && result;
                result = clocks[clockIndexes[3]].UpdateState(ArmState.Nine, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[4]].UpdateState(ArmState.Zero, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[5]].UpdateState(ArmState.Zero, ArmState.Zero);
                completed = completed && result;
                break;

            case 8:
                result = clocks[clockIndexes[0]].UpdateState(ArmState.Three, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[1]].UpdateState(ArmState.Zero, ArmState.Three);
                completed = completed && result;
                result = clocks[clockIndexes[2]].UpdateState(ArmState.Zero, ArmState.Three);
                completed = completed && result;
                result = clocks[clockIndexes[3]].UpdateState(ArmState.Nine, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[4]].UpdateState(ArmState.Zero, ArmState.Nine);
                completed = completed && result;
                result = clocks[clockIndexes[5]].UpdateState(ArmState.Zero, ArmState.Nine);
                completed = completed && result;
                break;

            case 9:
                result = clocks[clockIndexes[0]].UpdateState(ArmState.Three, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[1]].UpdateState(ArmState.Zero, ArmState.Three);
                completed = completed && result;
                result = clocks[clockIndexes[2]].UpdateState(ArmState.Three, ArmState.Three);
                completed = completed && result;
                result = clocks[clockIndexes[3]].UpdateState(ArmState.Nine, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[4]].UpdateState(ArmState.Zero, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[5]].UpdateState(ArmState.Zero, ArmState.Nine);
                completed = completed && result;
                break;
            default:
                break;
        }
        return completed;
    }

    public static bool StartAnimation(Dictionary<int, Clock> clocks, bool stopAtFinalState = true)
    {
        var completed = true;
        for (var i = 0; i < 4; i++)
        {
            var j = 6 * i;
            var result = clocks[j + 1].UpdateState(ArmState.Three, ArmState.Six, 0, 0, stopAtFinalState);
            completed = completed && result;
            result = clocks[j + 2].UpdateState(ArmState.Three, ArmState.Three, 0, 0, stopAtFinalState);
            completed = completed && result;
            result = clocks[j + 3].UpdateState(ArmState.Zero, ArmState.Three, 0, 0, stopAtFinalState);
            completed = completed && result;
            result = clocks[j + 4].UpdateState(ArmState.Six, ArmState.Nine, 0, 0, stopAtFinalState);
            completed = completed && result;
            result = clocks[j + 5].UpdateState(ArmState.Nine, ArmState.Nine, 0, 0, stopAtFinalState);
            completed = completed && result;
            result = clocks[j + 6].UpdateState(ArmState.Nine, ArmState.Zero, 0, 0, stopAtFinalState);
            completed = completed && result;
        }
        return completed;
    }

    public static bool StartAnimation2(Dictionary<int, Clock> clocks, bool stopAtFinalState = true)
    {
        var completed = true;
        for (var i = 0; i < 24; i++)
        {
            var result = clocks[i + 1].UpdateState(ArmState.Zero, ArmState.Six, 3 * i, 3 * i, stopAtFinalState);
            completed = completed && result;
        }
        return completed;
    }

    public class Controller
    {
        //Milliseconds
        private int timer = 0;
        private bool clockSettingsCompleted = false;
        private bool animationSettingsCompleted = false;
        private bool animationCompleted = false;

        private bool setTimeCompleted = true;
        private UpdateStateCallback updateStateCallback;
        public Dictionary<int, Clock> Clocks { get; private set; }
        public Controller(UpdateStateCallback callback)
        {
            updateStateCallback = callback;

            Clocks = new Dictionary<int, Clock>();

            for (var i = 0; i < 24; i++)
                Clocks.Add(i + 1, new Clock(i + 1));

            SetClocksConfigs(Clocks,
            new ArmConfig
                {
                    Direction = Direction.Clockwise,
                    MaxSpeedDegrees = 0.2,
                    Acceleration = 1,
                    Deceleration = 1
                },
            new ArmConfig
                {
                    Direction = Direction.Anticlockwise,
                    MaxSpeedDegrees = 0.2,
                    Acceleration = 1,
                    Deceleration = 1
                });

            SetClock(null);
        }

        private void SetClocksConfigs(Dictionary<int, Clock> clocks, ArmConfig firstArmConfig, ArmConfig secondArmConfig)
        {
            for (var i = 0; i < 24; i++)
            {
                Clocks[i + 1].FirstArm.Config = firstArmConfig;
                Clocks[i + 1].FirstArm.Config = secondArmConfig;
            }
        }

        public void SetClock(object? stateInfo)
        {
            var time = DateTime.Now;

            var hoursFirstDigit = time.Hour / 10;

            var hoursSecondDigit = time.Hour % 10;

            var minutFirstDigit = time.Minute / 10;

            var minuteSecondDigit = time.Minute % 10;

            if (minuteSecondDigit == 1 || minuteSecondDigit == 4 || minuteSecondDigit == 7)
            {
                if (animationCompleted)
                    if (timer == 1000)
                        StartAnimation2(Clocks, false);
                    else
                    {
                        if (!animationSettingsCompleted)
                        {
                            SetClocksConfigs(Clocks, new ArmConfig
                                {
                                    Direction = Direction.Clockwise,
                                    MaxSpeedDegrees = 0.2,
                                    Acceleration = 1,
                                    Deceleration = 1
                                },
                            new ArmConfig
                                {
                                    Direction = Direction.Clockwise,
                                    MaxSpeedDegrees = 0.2,
                                    Acceleration = 1,
                                    Deceleration = 1
                                });
                            animationSettingsCompleted = true;
                            clockSettingsCompleted = false;
                        }
                        timer += 10;
                    }
                else
                    animationCompleted = StartAnimation2(Clocks);
            }
            else
            {
                animationCompleted = false;
                setTimeCompleted = true;
                timer = 0;
                var completed = false;
                completed = SetNumber(hoursFirstDigit, new List<int> { 1, 2, 3, 4, 5, 6 }, Clocks);
                setTimeCompleted &= completed;
                completed = SetNumber(hoursSecondDigit, new List<int> { 7, 8, 9, 10, 11, 12 }, Clocks);
                setTimeCompleted &= completed;
                completed = SetNumber(minutFirstDigit, new List<int> { 13, 14, 15, 16, 17, 18 }, Clocks);
                setTimeCompleted &= completed;
                completed = SetNumber(minuteSecondDigit, new List<int> { 19, 20, 21, 22, 23, 24 }, Clocks);
                setTimeCompleted &= completed;

                if (!clockSettingsCompleted && setTimeCompleted)
                {
                    SetClocksConfigs(Clocks,
                    new ArmConfig
                        {
                            Direction = Direction.Clockwise,
                            MaxSpeedDegrees = 0.2,
                            Acceleration = 1,
                            Deceleration = 1
                        },
                    new ArmConfig
                        {
                            Direction = Direction.Anticlockwise,
                            MaxSpeedDegrees = 0.2,
                            Acceleration = 1,
                            Deceleration = 1
                        });
                    setTimeCompleted = false;
                    clockSettingsCompleted = true;
                    animationSettingsCompleted = false;
                }
            }

            updateStateCallback();
        }
    }

    public class Clock
    {
        private ArmConfig _defaultFirstArmConfig = new ArmConfig
            {
                Direction = Direction.Clockwise,
                MaxSpeedDegrees = 0.2,
                Acceleration = 1,
                Deceleration = 1
            };
        private ArmConfig _defaultSecondArmConfig = new ArmConfig
            {
                Direction = Direction.Clockwise,
                MaxSpeedDegrees = 0.2,
                Acceleration = 1,
                Deceleration = 1
            };
        public int Id { get; private set; }
        public ClockArm FirstArm { get; private set; } = new ClockArm();
        public ClockArm SecondArm { get; private set; } = new ClockArm();
        public Clock(int Id, ArmConfig? firstArmConfig = null, ArmConfig? secondArmConfig = null)
        {
            this.Id = Id;
            FirstArm.CurrentState = 0.0;
            FirstArm.Config = firstArmConfig != null ? firstArmConfig : _defaultFirstArmConfig;
            SecondArm.CurrentState = 0.0;
            SecondArm.Config = secondArmConfig != null ? secondArmConfig : _defaultSecondArmConfig;
        }

        public bool UpdateState(ArmState firstArmState, ArmState secondArmState, double firstArmStateDeltaDegrees = 0, double
        secondArmStateDeltaDegrees = 0, bool stopAtFinalState = true)
        {
            var firstArmFinalStateDegrees = Math.Round(ArmStateToDegree(firstArmState) + firstArmStateDeltaDegrees, 2);
            var secondArmFinalStateDegrees = Math.Round(ArmStateToDegree(secondArmState) + secondArmStateDeltaDegrees, 2);
            if (!stopAtFinalState || (FirstArm.CurrentState != firstArmFinalStateDegrees))
            {
                UpdateArmState(FirstArm);
            }
            if (!stopAtFinalState || (SecondArm.CurrentState != secondArmFinalStateDegrees))
            {
                UpdateArmState(SecondArm);
            }
            return stopAtFinalState && (FirstArm.CurrentState == firstArmFinalStateDegrees) && (SecondArm.CurrentState ==
            secondArmFinalStateDegrees) ? true : false;
        }

        private void UpdateArmState(ClockArm arm)
        {
            arm.CurrentState = arm.Config.Direction == Direction.Clockwise ?
            Math.Round(arm.CurrentState + arm.Config.MaxSpeedDegrees, 2) :
            Math.Round(arm.CurrentState - arm.Config.MaxSpeedDegrees, 2);
        }
    }

    public class ClockArm
    {
        private double _currentState;
        public double CurrentState
        {
            get { return _currentState; }
            set { _currentState = value > 0 ? value % 360.0 : (value + 360.0) % 360.0; }
        }
        public ArmConfig Config { get; set; } = new ArmConfig();
    }

    public class ArmConfig
    {
        public Direction Direction { get; set; } = Direction.Clockwise;
        public double MaxSpeedDegrees { get; set; } = 1;
        public int Acceleration { get; set; } = 1;
        public int Deceleration { get; set; } = 1;
    }

    public enum Direction
    {
        Clockwise,
        Anticlockwise
    }

    public enum ArmState
    {
        Zero,
        Three,
        Six,
        Nine,
        None,
        HPOne
    }
}
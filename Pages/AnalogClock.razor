@page "/"
@inject IJSRuntime JSRuntime;
@implements IDisposable;
@using Time.AnimationConfig;
@using Time.AnimationEngine;
@using Time.Components;

<div class="clocks-wrapper">
    @for (int j = 0; j < 8; j++)
    {
        <div class="clock-container">
            @for (int i = 1; i < 4; i++)
            {
                <div class="clock">
                    <div class="hour" @ref=HourReference>
                        <div></div>
                    </div>
                    <div class="minute" @ref=MinuteReference>
                        <div></div>
                    </div>
                    <span class="ctr"></span>
                </div>
            }
        </div>
    }
</div>

@code {
    Controller? controller;
    List<ElementReference> hourReferences = new List<ElementReference>();
    List<ElementReference> minuteReferences = new List<ElementReference>();
    ElementReference HourReference
    {
        set { hourReferences.Add(value); }
    }

    ElementReference MinuteReference
    {
        set { minuteReferences.Add(value); }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            controller = new Controller(JSRuntime, hourReferences, minuteReferences);
            controller.SetClock();
        }
    }
    public void Dispose()
    {
        controller?.Dispose();
    }
    public class Controller : IDisposable
    {
        private ChainedAnimationsManager chainedAnimationsManager;
        public Dictionary<int, Clock> Clocks { get; private set; }
        public Controller(IJSRuntime JSRuntime, List<ElementReference> hourReferences, List<ElementReference> minuteReferences)
        {
            Clocks = new Dictionary<int, Clock>();

            for (var i = 0; i < 24; i++)
                Clocks.Add(i + 1, new Clock(i + 1, hourReferences[i], minuteReferences[i]));

            var wavePatternAnimationManager = new PatternAnimationManager(JSRuntime, Clocks,
            (Dictionary<int, Clock> clocks) =>
            {
                Func<int, Components.AnimationConfig> SetHourArmAnimationConfig = (index) =>
    new Components.AnimationConfig
            {
                Direction = Direction.Anticlockwise,
                EasingFunction = "ease-in-out",
                Duration = AnimationConfigs.StaggeredAnimation(false, index, 4500, 0),
                Delay = AnimationConfigs.StaggeredAnimation(true, index, 0, 120)
            };

                AnimationConfigs.SetClocksConfigsByRow(clocks, SetHourArmAnimationConfig, SetHourArmAnimationConfig);
                AnimationConfigs.SetNextWaveAnimationStatus(clocks);
            });

            var timeAnimationManager = new TimeAnimationManager(JSRuntime, Clocks, (Dictionary<int, Clock> clocks) =>
            {
                Func<int, Components.AnimationConfig> SetHourArmAnimationConfig = (index) =>
    new Components.AnimationConfig
            {
                Direction = Direction.Anticlockwise,
                EasingFunction = "ease-out",
                Duration = AnimationConfigs.StaggeredAnimation(false, index, 4000, 80),
                Delay = AnimationConfigs.StaggeredAnimation(true, index, 0, 120)
            };

                Func<int, Components.AnimationConfig> SetMinuteArmAnimationConfig = (index) =>
    new Components.AnimationConfig
            {
                Direction = Direction.Clockwise,
                EasingFunction = "ease-out",
                Duration = AnimationConfigs.StaggeredAnimation(false, index, 4000, 80),
                Delay = AnimationConfigs.StaggeredAnimation(true, index, 0, 120)
            };
                AnimationConfigs.SetReverseClocksConfigs(clocks, SetHourArmAnimationConfig, SetMinuteArmAnimationConfig);
            }, (Dictionary<int, Clock> clocks) =>
            {
                AnimationConfigs.SetStaticClocksAnimationConfigs(clocks, new Components.AnimationConfig
                {
                    Direction = Direction.Anticlockwise,
                    EasingFunction = "ease-in-out",
                    Duration = 4000,
                    Delay = 0
                }, new Components.AnimationConfig
                {
                    Direction = Direction.Clockwise,
                    EasingFunction = "ease-in-out",
                    Duration = 4000,
                    Delay = 0
                });
            });

            var anticlockwiseInfiniteAnimationManager = new InfiniteAnimationManager(JSRuntime, Clocks, (Dictionary<int, Clock>
            clocks) =>
            {
                Func<int, Components.AnimationConfig> SetHourArmAnimationConfig = (index) =>
    new Components.AnimationConfig
            {
                Direction = Direction.Anticlockwise,
                EasingFunction = "linear",
                Duration = AnimationConfigs.StaggeredAnimation(false, index, 5000, 0),
                Delay = AnimationConfigs.StaggeredAnimation(true, index, 0, 80)
            };

                AnimationConfigs.SetClocksAnimationConfigs(clocks, SetHourArmAnimationConfig, SetHourArmAnimationConfig);
            });

            var oppositeDirectionsStaggeredDelayInfiniteAnimationManager = new InfiniteAnimationManager(JSRuntime, Clocks,
            (Dictionary<int, Clock>
            clocks) =>
            {
                Func<int, Components.AnimationConfig> SetHourArmAnimationConfig = (index) =>
    new Components.AnimationConfig
            {
                Direction = Direction.Anticlockwise,
                EasingFunction = "linear",
                Duration = AnimationConfigs.StaggeredAnimation(false, index, 5000, 0),
                Delay = AnimationConfigs.StaggeredAnimation(true, index, 0, 80)
            };

                Func<int, Components.AnimationConfig> SetMinuteArmAnimationConfig = (index) =>
    new Components.AnimationConfig
            {
                Direction = Direction.Clockwise,
                EasingFunction = "linear",
                Duration = AnimationConfigs.StaggeredAnimation(false, index, 5000, 0),
                Delay = AnimationConfigs.StaggeredAnimation(true, index, 0, 80)
            };
                AnimationConfigs.SetClocksAnimationConfigs(clocks, SetHourArmAnimationConfig, SetMinuteArmAnimationConfig);
            });

            chainedAnimationsManager = new ChainedAnimationsManager(new List<(IAnimationManager, int)> { (timeAnimationManager,
20000),(wavePatternAnimationManager, 10000), (anticlockwiseInfiniteAnimationManager, 20000), (timeAnimationManager,
20000), (wavePatternAnimationManager, 10000), (oppositeDirectionsStaggeredDelayInfiniteAnimationManager, 20000) });
        }

        public void SetClock()
        {
            chainedAnimationsManager.Start();
        }

        public void Dispose()
        {
            chainedAnimationsManager?.Dispose();
        }
    }
}
@page "/"
@inject IJSRuntime JSRuntime

<div class="clocks-wrapper">
    @for (int j = 0; j < 8; j++)
    {
        <div class="clock-container">
            @for (int i = 1; i < 4; i++)
            {
                <div class="clock">
                    <div class="hour" @ref=HourReference
                        style="transform:rotate(@(controller != null ? controller.Clocks[i + j*3].FirstArm.CurrentState : 0)deg);">
                        <div></div>
                    </div>
                    <div class="minute" @ref=MinuteReference
                        style="transform:rotate(@(controller != null ? controller.Clocks[i + j*3].SecondArm.CurrentState : 0)deg);">
                        <div></div>
                    </div>
                    <span class="ctr"></span>
                </div>
            }
        </div>
    }
</div>

@code {
    private DotNetObjectReference<AnalogClock>? dotNetHelper;
    private int timeIntervalMilliseconds = 16;
    Controller? controller;
    List<ElementReference> hourReferences = new List<ElementReference>();
    List<ElementReference> minuteReferences = new List<ElementReference>();
    ElementReference HourReference
    {
        set { hourReferences.Add(value); }
    }

    ElementReference MinuteReference
    {
        set { minuteReferences.Add(value); }
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        controller = new Controller();

        await StartAnimation();
    }

    private async Task StartAnimation()
    {
        dotNetHelper = DotNetObjectReference.Create(this);
        // Start the JS animation loop
        await JSRuntime.InvokeVoidAsync("animationLoop.requestAnimationFrame", dotNetHelper);
    }

    public void Dispose()
    {
        dotNetHelper?.Dispose();
    }

    [JSInvokable]
    public async void UpdateFrame(double timeElapsed)
    {
        await controller.SetClock(timeElapsed);
        // Trigger the next frame
        //await InvokeAsync(StateHasChanged);

        for (int i = 1; i <= 24; i++)
        {
            await JSRuntime.InvokeVoidAsync("animationLoop.updateState", hourReferences[i - 1], minuteReferences[i - 1],
            controller.Clocks[i].FirstArm.CurrentState, controller.Clocks[i].SecondArm.CurrentState);
        }

        await Task.Yield();
    }

    public static double ArmStateToDegree(ArmState state)
    {
        switch (state)
        {
            case ArmState.Zero:
                return 0.0;
            case ArmState.Three:
                return 90.0;
            case ArmState.Six:
                return 180.0;
            case ArmState.Nine:
                return 270.0;
            case ArmState.None:
                return 225.0;
            case ArmState.HPOne:
                return 45.0;
            default: return 0;
        }
    }

    public static bool SetNumbers(int hoursFirstDigit, int hoursSecondDigit, int minuteFirstDigit, int minuteSecondDigit,
    Dictionary<int, Clock> clocks)
    {
        var timeSetupCompleted = true;

        var completed = SetNumber(hoursFirstDigit, new List<int> { 1, 2, 3, 4, 5, 6 }, clocks);
        timeSetupCompleted &= completed;
        completed = SetNumber(hoursSecondDigit, new List<int> { 7, 8, 9, 10, 11, 12 }, clocks);
        timeSetupCompleted &= completed;
        completed = SetNumber(minuteFirstDigit, new List<int> { 13, 14, 15, 16, 17, 18 }, clocks);
        timeSetupCompleted &= completed;
        completed = SetNumber(minuteSecondDigit, new List<int> { 19, 20, 21, 22, 23, 24 }, clocks);
        timeSetupCompleted &= completed;

        return timeSetupCompleted;
    }

    public static bool SetNumber(int number, List<int> clockIndexes, Dictionary<int, Clock> clocks)
    {
        var completed = true;
        var result = false;
        switch (number)
        {
            case 0:
                result = clocks[clockIndexes[0]].UpdateState(ArmState.Three, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[1]].UpdateState(ArmState.Zero, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[2]].UpdateState(ArmState.Zero, ArmState.Three);
                completed = completed && result;
                result = clocks[clockIndexes[3]].UpdateState(ArmState.Nine, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[4]].UpdateState(ArmState.Zero, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[5]].UpdateState(ArmState.Zero, ArmState.Nine);
                completed = completed && result;
                break;

            case 1:
                result = clocks[clockIndexes[0]].UpdateState(ArmState.None, ArmState.None);
                completed = completed && result;
                result = clocks[clockIndexes[1]].UpdateState(ArmState.None, ArmState.None);
                completed = completed && result;
                result = clocks[clockIndexes[2]].UpdateState(ArmState.None, ArmState.None);
                completed = completed && result;
                result = clocks[clockIndexes[3]].UpdateState(ArmState.Six, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[4]].UpdateState(ArmState.Zero, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[5]].UpdateState(ArmState.Zero, ArmState.Zero);
                completed = completed && result;
                break;

            case 2:
                result = clocks[clockIndexes[0]].UpdateState(ArmState.Three, ArmState.Three);
                completed = completed && result;
                result = clocks[clockIndexes[1]].UpdateState(ArmState.Three, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[2]].UpdateState(ArmState.Zero, ArmState.Three);
                completed = completed && result;
                result = clocks[clockIndexes[3]].UpdateState(ArmState.Nine, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[4]].UpdateState(ArmState.Zero, ArmState.Nine);
                completed = completed && result;
                result = clocks[clockIndexes[5]].UpdateState(ArmState.Nine, ArmState.Nine);
                completed = completed && result;
                break;

            case 3:
                result = clocks[clockIndexes[0]].UpdateState(ArmState.Three, ArmState.Three);
                completed = completed && result;
                result = clocks[clockIndexes[1]].UpdateState(ArmState.Three, ArmState.Three);
                completed = completed && result;
                result = clocks[clockIndexes[2]].UpdateState(ArmState.Three, ArmState.Three);
                completed = completed && result;
                result = clocks[clockIndexes[3]].UpdateState(ArmState.Nine, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[4]].UpdateState(ArmState.Zero, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[5]].UpdateState(ArmState.Zero, ArmState.Nine);
                completed = completed && result;
                break;

            case 4:
                result = clocks[clockIndexes[0]].UpdateState(ArmState.Six, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[1]].UpdateState(ArmState.Zero, ArmState.Three);
                completed = completed && result;
                result = clocks[clockIndexes[2]].UpdateState(ArmState.None, ArmState.None);
                completed = completed && result;
                result = clocks[clockIndexes[3]].UpdateState(ArmState.Six, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[4]].UpdateState(ArmState.Nine, ArmState.Zero);
                completed = completed && result;
                result = clocks[clockIndexes[5]].UpdateState(ArmState.Zero, ArmState.Zero);
                completed = completed && result;
                break;

            case 5:
                result = clocks[clockIndexes[0]].UpdateState(ArmState.Three, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[1]].UpdateState(ArmState.Zero, ArmState.Three);
                completed = completed && result;
                result = clocks[clockIndexes[2]].UpdateState(ArmState.Three, ArmState.Three);
                completed = completed && result;
                result = clocks[clockIndexes[3]].UpdateState(ArmState.Nine, ArmState.Nine);
                completed = completed && result;
                result = clocks[clockIndexes[4]].UpdateState(ArmState.Nine, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[5]].UpdateState(ArmState.Zero, ArmState.Nine);
                completed = completed && result;
                break;

            case 6:
                result = clocks[clockIndexes[0]].UpdateState(ArmState.Three, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[1]].UpdateState(ArmState.Zero, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[2]].UpdateState(ArmState.Zero, ArmState.Three);
                completed = completed && result;
                result = clocks[clockIndexes[3]].UpdateState(ArmState.Nine, ArmState.Nine);
                completed = completed && result;
                result = clocks[clockIndexes[4]].UpdateState(ArmState.Nine, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[5]].UpdateState(ArmState.Zero, ArmState.Nine);
                completed = completed && result;
                break;

            case 7:
                result = clocks[clockIndexes[0]].UpdateState(ArmState.Three, ArmState.Three);
                completed = completed && result;
                result = clocks[clockIndexes[1]].UpdateState(ArmState.None, ArmState.None);
                completed = completed && result;
                result = clocks[clockIndexes[2]].UpdateState(ArmState.None, ArmState.None);
                completed = completed && result;
                result = clocks[clockIndexes[3]].UpdateState(ArmState.Nine, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[4]].UpdateState(ArmState.Zero, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[5]].UpdateState(ArmState.Zero, ArmState.Zero);
                completed = completed && result;
                break;

            case 8:
                result = clocks[clockIndexes[0]].UpdateState(ArmState.Three, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[1]].UpdateState(ArmState.Zero, ArmState.Three);
                completed = completed && result;
                result = clocks[clockIndexes[2]].UpdateState(ArmState.Zero, ArmState.Three);
                completed = completed && result;
                result = clocks[clockIndexes[3]].UpdateState(ArmState.Nine, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[4]].UpdateState(ArmState.Zero, ArmState.Nine);
                completed = completed && result;
                result = clocks[clockIndexes[5]].UpdateState(ArmState.Zero, ArmState.Nine);
                completed = completed && result;
                break;

            case 9:
                result = clocks[clockIndexes[0]].UpdateState(ArmState.Three, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[1]].UpdateState(ArmState.Zero, ArmState.Three);
                completed = completed && result;
                result = clocks[clockIndexes[2]].UpdateState(ArmState.Three, ArmState.Three);
                completed = completed && result;
                result = clocks[clockIndexes[3]].UpdateState(ArmState.Nine, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[4]].UpdateState(ArmState.Zero, ArmState.Six);
                completed = completed && result;
                result = clocks[clockIndexes[5]].UpdateState(ArmState.Zero, ArmState.Nine);
                completed = completed && result;
                break;
            default:
                break;
        }
        return completed;
    }

    public static bool StartAnimation(Dictionary<int, Clock> clocks, bool stopAtFinalState = true)
    {
        var completed = true;
        for (var i = 0; i < 4; i++)
        {
            var j = 6 * i;
            var result = clocks[j + 1].UpdateState(ArmState.Three, ArmState.Six, 0, 0, stopAtFinalState);
            completed = completed && result;
            result = clocks[j + 2].UpdateState(ArmState.Three, ArmState.Three, 0, 0, stopAtFinalState);
            completed = completed && result;
            result = clocks[j + 3].UpdateState(ArmState.Zero, ArmState.Three, 0, 0, stopAtFinalState);
            completed = completed && result;
            result = clocks[j + 4].UpdateState(ArmState.Six, ArmState.Nine, 0, 0, stopAtFinalState);
            completed = completed && result;
            result = clocks[j + 5].UpdateState(ArmState.Nine, ArmState.Nine, 0, 0, stopAtFinalState);
            completed = completed && result;
            result = clocks[j + 6].UpdateState(ArmState.Nine, ArmState.Zero, 0, 0, stopAtFinalState);
            completed = completed && result;
        }
        return completed;
    }

    public static bool StartAnimation2(Dictionary<int, Clock> clocks, bool stopAtFinalState = true,
    double timeElapsedMillisec = 0)
    {
        var completed = true;
        for (var i = 0; i < 24; i++)
        {
            if (stopAtFinalState || (!stopAtFinalState && clocks[i + 1].delayAnimation.TimeIsUp(timeElapsedMillisec)))
            {
                var result = clocks[i + 1].UpdateState(ArmState.Zero, ArmState.Six, 0, 0, stopAtFinalState);
                completed = completed && result;
            }
            else
                completed = false;
        }
        return completed;
    }

    private static void SetClocksConfigs(Dictionary<int, Clock> clocks, ArmConfig firstArmConfig, ArmConfig secondArmConfig)
    {
        for (var i = 0; i < 24; i++)
        {
            clocks[i + 1].UpdateClockArmsConfig(firstArmConfig, secondArmConfig);
            clocks[i + 1].delayAnimation.Started = false;
            clocks[i + 1].delayAnimation.DelayMillisec = 60 * (i + 1);
        }
    }

    public class Controller
    {
        private double maxSpeedDegrees = 1;
        private bool clockSettingsCompleted = false;
        private bool animationSettingsCompleted = false;
        private bool animationSetupCompleted = false;
        private bool timeSetupCompleted = true;
        private DelayAnimation delayAnimation = new DelayAnimation();
        public Dictionary<int, Clock> Clocks { get; private set; }
        public Controller()
        {
            Clocks = new Dictionary<int, Clock>();

            for (var i = 0; i < 24; i++)
                Clocks.Add(i + 1, new Clock(i + 1, new ArmConfig
                    {
                        Direction = Direction.Clockwise,
                        MaxSpeedDegrees = maxSpeedDegrees,
                        Acceleration = 1,
                        Deceleration = 1
                    }, new ArmConfig
                    {
                        Direction = Direction.Anticlockwise,
                        MaxSpeedDegrees = maxSpeedDegrees,
                        Acceleration = 1,
                        Deceleration = 1
                    }));
        }

        public async Task SetClock(double timeElapsed)
        {
            var time = DateTime.Now;

            var hoursFirstDigit = time.Hour / 10;

            var hoursSecondDigit = time.Hour % 10;

            var minutFirstDigit = time.Minute / 10;

            var minuteSecondDigit = time.Minute % 10;

            //Define when the animation should start
            if (minuteSecondDigit == 1 || minuteSecondDigit == 4 || minuteSecondDigit == 7 || minuteSecondDigit == 9)
            {
                if (animationSetupCompleted)
                {
                    if (!animationSettingsCompleted)
                    {
                        Console.WriteLine("Animation setup");
                        SetClocksConfigs(Clocks, new ArmConfig
                            {
                                Direction = Direction.Clockwise,
                                MaxSpeedDegrees = maxSpeedDegrees,
                                Acceleration = 1,
                                Deceleration = 1
                            },
                        new ArmConfig
                            {
                                Direction = Direction.Clockwise,
                                MaxSpeedDegrees = maxSpeedDegrees,
                                Acceleration = 1,
                                Deceleration = 1
                            });

                        animationSettingsCompleted = true;
                        clockSettingsCompleted = false;
                    }
                    if (delayAnimation.TimeIsUp(timeElapsed))
                        StartAnimation2(Clocks, false, timeElapsed);
                }
                else
                    animationSetupCompleted = StartAnimation2(Clocks, true, timeElapsed);
            }
            else
            {
                delayAnimation.Started = false;
                animationSetupCompleted = false;
                animationSettingsCompleted = false;

                timeSetupCompleted = SetNumbers(hoursFirstDigit, hoursSecondDigit, minutFirstDigit, minuteSecondDigit, Clocks);

                if (!clockSettingsCompleted && timeSetupCompleted)
                {
                    Console.WriteLine("Time setup");
                    SetClocksConfigs(Clocks,
                    new ArmConfig
                        {
                            Direction = Direction.Clockwise,
                            MaxSpeedDegrees = maxSpeedDegrees,
                            Acceleration = 1,
                            Deceleration = 1
                        },
                    new ArmConfig
                        {
                            Direction = Direction.Anticlockwise,
                            MaxSpeedDegrees = maxSpeedDegrees,
                            Acceleration = 1,
                            Deceleration = 1
                        });
                    clockSettingsCompleted = true;
                }
            }
        }
    }

    public class DelayAnimation
    {
        private double delayStartTimeMillisec = 0;
        public bool Started { get; set; } = false;
        public int DelayMillisec { get; set; } = 1000;
        public bool TimeIsUp(double timeElapsed)
        {
            if (!Started)
            {
                delayStartTimeMillisec = timeElapsed;
                Started = true;
            }
            return timeElapsed - delayStartTimeMillisec >= DelayMillisec;
        }
    }

    public class Clock
    {
        private ArmConfig _defaultFirstArmConfig = new ArmConfig
            {
                Direction = Direction.Clockwise,
                MaxSpeedDegrees = 1,
                Acceleration = 1,
                Deceleration = 1
            };
        private ArmConfig _defaultSecondArmConfig = new ArmConfig
            {
                Direction = Direction.Clockwise,
                MaxSpeedDegrees = 1,
                Acceleration = 1,
                Deceleration = 1
            };
        public int Id { get; private set; }
        public ClockArm FirstArm { get; private set; } = new ClockArm();
        public ClockArm SecondArm { get; private set; } = new ClockArm();
        public DelayAnimation delayAnimation { get; private set; } = new DelayAnimation();
        public Clock(int Id, ArmConfig? firstArmConfig = null, ArmConfig? secondArmConfig = null)
        {
            this.Id = Id;
            FirstArm.CurrentState = 0.0;
            FirstArm.Config = firstArmConfig != null ? firstArmConfig : _defaultFirstArmConfig;
            SecondArm.CurrentState = 0.0;
            SecondArm.Config = secondArmConfig != null ? secondArmConfig : _defaultSecondArmConfig;
        }

        public void UpdateClockArmsConfig(ArmConfig firstArmConfig, ArmConfig secondArmConfig)
        {
            FirstArm.Config = firstArmConfig;
            SecondArm.Config = secondArmConfig;
        }

        public bool UpdateState(ArmState firstArmState, ArmState secondArmState, double firstArmStateDeltaDegrees = 0, double
        secondArmStateDeltaDegrees = 0, bool stopAtFinalState = true)
        {
            var firstArmFinalStateDegrees = Math.Round(ArmStateToDegree(firstArmState) + firstArmStateDeltaDegrees, 2);
            var secondArmFinalStateDegrees = Math.Round(ArmStateToDegree(secondArmState) + secondArmStateDeltaDegrees, 2);
            if (!stopAtFinalState || (FirstArm.CurrentState != firstArmFinalStateDegrees))
            {
                UpdateArmState(FirstArm);
            }
            if (!stopAtFinalState || (SecondArm.CurrentState != secondArmFinalStateDegrees))
            {
                UpdateArmState(SecondArm);
            }
            return stopAtFinalState && (FirstArm.CurrentState == firstArmFinalStateDegrees) && (SecondArm.CurrentState ==
            secondArmFinalStateDegrees) ? true : false;
        }

        private void UpdateArmState(ClockArm arm)
        {
            arm.CurrentState = arm.Config.Direction == Direction.Clockwise ?
            Math.Round(arm.CurrentState + arm.Config.MaxSpeedDegrees, 2) :
            Math.Round(arm.CurrentState - arm.Config.MaxSpeedDegrees, 2);
        }
    }

    public class ClockArm
    {
        private double _currentState;
        public double CurrentState
        {
            get { return _currentState; }
            set { _currentState = value > 0 ? value % 360.0 : (value + 360.0) % 360.0; }
        }
        public ArmConfig Config { get; set; } = new ArmConfig();
    }

    public class ArmConfig
    {
        public Direction Direction { get; set; } = Direction.Clockwise;
        public double MaxSpeedDegrees { get; set; } = 1;
        public int Acceleration { get; set; } = 1;
        public int Deceleration { get; set; } = 1;
    }

    public enum Direction
    {
        Clockwise,
        Anticlockwise
    }

    public enum ArmState
    {
        Zero,
        Three,
        Six,
        Nine,
        None,
        HPOne
    }
}
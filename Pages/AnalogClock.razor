@page "/"
@inject IJSRuntime JSRuntime
@using Time.AnimationConfig;
@using Time.Components;

<div class="clocks-wrapper">
    @for (int j = 0; j < 8; j++)
    {
        <div class="clock-container">
            @for (int i = 1; i < 4; i++)
            {
                <div class="clock">
                    <div class="hour" @ref=HourReference
                        style="transform:rotate(@(controller != null ? controller.Clocks[i + j*3].FirstArm.CurrentState : 0)deg);">
                        <div></div>
                    </div>
                    <div class="minute" @ref=MinuteReference
                        style="transform:rotate(@(controller != null ? controller.Clocks[i + j*3].SecondArm.CurrentState : 0)deg);">
                        <div></div>
                    </div>
                    <span class="ctr"></span>
                </div>
            }
        </div>
    }
</div>

@code {
    private DotNetObjectReference<AnalogClock>? dotNetHelper;
    private int timeIntervalMilliseconds = 16;
    Controller? controller;
    List<ElementReference> hourReferences = new List<ElementReference>();
    List<ElementReference> minuteReferences = new List<ElementReference>();
    ElementReference HourReference
    {
        set { hourReferences.Add(value); }
    }

    ElementReference MinuteReference
    {
        set { minuteReferences.Add(value); }
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        controller = new Controller();

        await StartAnimation();
    }

    private async Task StartAnimation()
    {
        dotNetHelper = DotNetObjectReference.Create(this);
        // Start the JS animation loop
        await JSRuntime.InvokeVoidAsync("animationLoop.requestAnimationFrame", dotNetHelper);
    }

    public void Dispose()
    {
        dotNetHelper?.Dispose();
    }

    [JSInvokable]
    public async void UpdateFrame(double timeElapsed)
    {
        if (controller != null)
        {
            controller.SetClock(timeElapsed);
            // Trigger the next frame
            //await InvokeAsync(StateHasChanged);

            for (int i = 1; i <= 24; i++)
            {
                await JSRuntime.InvokeVoidAsync("animationLoop.updateState", hourReferences[i - 1], minuteReferences[i - 1],
                controller.Clocks[i].FirstArm.CurrentState, controller.Clocks[i].SecondArm.CurrentState);
            }
        }

        await Task.Yield();
    }

    public class Controller
    {
        private Animation animation1;
        private Animation animation2;
        private Animation animation3;
        private double maxSpeedDegrees = 1;
        public Dictionary<int, Clock> Clocks { get; private set; }
        public Controller()
        {
            Clocks = new Dictionary<int, Clock>();

            for (var i = 0; i < 24; i++)
                Clocks.Add(i + 1, new Clock(i + 1, new ArmConfig
                    {
                        Direction = Direction.Clockwise,
                        MaxSpeedDegrees = maxSpeedDegrees,
                        Acceleration = 1,
                        Deceleration = 1
                    }, new ArmConfig
                    {
                        Direction = Direction.Anticlockwise,
                        MaxSpeedDegrees = maxSpeedDegrees,
                        Acceleration = 1,
                        Deceleration = 1
                    }));

            animation1 = new Animation();
            animation1.OnStatusChanged += (AnimationStatus status, double timeElapsed) =>
            {
                switch (status)
                {
                    case AnimationStatus.StartInitAnimation:
                        return AnimationConfigs.StartAnimation2(Clocks, true, timeElapsed);
                    case AnimationStatus.StartAnimation:
                        return AnimationConfigs.StartAnimation2(Clocks, false, timeElapsed);
                    case AnimationStatus.PerformPreAnimationSettings:
                        AnimationConfigs.SetClocksConfigs(Clocks,
        new ArmConfig
                {
                    Direction = Direction.Clockwise,
                    MaxSpeedDegrees = maxSpeedDegrees,
                    Acceleration = 1,
                    Deceleration = 1
                },
        new ArmConfig
                {
                    Direction = Direction.Clockwise,
                    MaxSpeedDegrees = maxSpeedDegrees,
                    Acceleration = 1,
                    Deceleration = 1
                });
                        return false;
                    default: return false;
                }
            };

            animation2 = new Animation();
            animation2.DelayAnimation.DelayMillisec = 0;
            animation2.OnStatusChanged += (AnimationStatus status, double timeElapsed) =>
            {
                switch (status)
                {
                    case AnimationStatus.StartInitAnimation:
                        return AnimationConfigs.SetNumbers(Clocks);
                    case AnimationStatus.StartAnimation:
                        return AnimationConfigs.SetNumbers(Clocks);
                    case AnimationStatus.PerformPreAnimationSettings:
                        AnimationConfigs.SetClocksConfigs(Clocks,
        new ArmConfig
                {
                    Direction = Direction.Clockwise,
                    MaxSpeedDegrees = maxSpeedDegrees,
                    Acceleration = 1,
                    Deceleration = 1
                },
        new ArmConfig
                {
                    Direction = Direction.Anticlockwise,
                    MaxSpeedDegrees = maxSpeedDegrees,
                    Acceleration = 1,
                    Deceleration = 1
                });
                        return false;
                    default: return false;
                }
            };

            animation3 = new Animation();
            animation3.OnStatusChanged += (AnimationStatus status, double timeElapsed) =>
            {
                switch (status)
                {
                    case AnimationStatus.StartInitAnimation:
                        return AnimationConfigs.StartAnimation(Clocks, true);
                    case AnimationStatus.StartAnimation:
                        return AnimationConfigs.StartAnimation(Clocks, false);
                    case AnimationStatus.PerformPreAnimationSettings:
                        AnimationConfigs.SetClocksConfigs(Clocks,
        new ArmConfig
                {
                    Direction = Direction.Clockwise,
                    MaxSpeedDegrees = maxSpeedDegrees,
                    Acceleration = 1,
                    Deceleration = 1
                },
        new ArmConfig
                {
                    Direction = Direction.Anticlockwise,
                    MaxSpeedDegrees = maxSpeedDegrees,
                    Acceleration = 1,
                    Deceleration = 1
                });
                        return false;
                    default: return false;
                }
            };

            animation1.OnSettingsCompleted += animation2.OnNextAnimationSettingsCompleted;
            animation3.OnSettingsCompleted += animation2.OnNextAnimationSettingsCompleted;
            animation2.OnSettingsCompleted += animation1.OnNextAnimationSettingsCompleted;
            animation3.OnSettingsCompleted += animation1.OnNextAnimationSettingsCompleted;
            animation2.OnSettingsCompleted += animation3.OnNextAnimationSettingsCompleted;
            animation1.OnSettingsCompleted += animation3.OnNextAnimationSettingsCompleted;
        }

        public void SetClock(double timeElapsed)
        {
            var time = DateTime.Now;

            var minuteSecondDigit = time.Minute % 10;

            //Define when the animation should start
            if (minuteSecondDigit == 7 || minuteSecondDigit == 9)
                animation1.Start("animation1", timeElapsed);
            else if (minuteSecondDigit == 1 || minuteSecondDigit == 3 || minuteSecondDigit == 4)
                animation3.Start("animation3", timeElapsed);
            else
                animation2.Start("animation2", timeElapsed);
        }
    }
}
@page "/analogclock"

<div class="clocks-wrapper">
    <div class="clock-container">
        <div class="clock">
            <div class="hour" style="transform:rotate(@(controller != null ? controller.Clocks[1].FirstArm.CurrentState : 0)deg);"><div></div></div>
            <div class="minute" style="transform:rotate(@(controller != null ? controller.Clocks[1].SecondArm.CurrentState : 0)deg);"><div></div></div>
            <span class="ctr"></span>
        </div>
        <div class="clock">
            <div class="hour" style="transform:rotate(@(controller != null ? controller.Clocks[2].FirstArm.CurrentState : 0)deg);"><div></div></div>
            <div class="minute" style="transform:rotate(@(controller != null ? controller.Clocks[2].SecondArm.CurrentState : 0)deg);"><div></div></div>
            <span class="ctr"></span>
        </div>
        <div class="clock">
            <div class="hour" style="transform:rotate(@(controller != null ? controller.Clocks[3].FirstArm.CurrentState : 0)deg);"><div></div></div>
            <div class="minute" style="transform:rotate(@(controller != null ? controller.Clocks[3].SecondArm.CurrentState : 0)deg);"><div></div></div>
            <span class="ctr"></span>
        </div>
    </div>
    <div class="clock-container">
        <div class="clock">
            <div class="hour" style="transform:rotate(@(controller != null ? controller.Clocks[4].FirstArm.CurrentState : 0)deg);"><div></div></div>
            <div class="minute" style="transform:rotate(@(controller != null ? controller.Clocks[4].SecondArm.CurrentState : 0)deg);"><div></div></div>
            <span class="ctr"></span>
        </div>
        <div class="clock">
            <div class="hour" style="transform:rotate(@(controller != null ? controller.Clocks[5].FirstArm.CurrentState : 0)deg);"><div></div></div>
            <div class="minute" style="transform:rotate(@(controller != null ? controller.Clocks[5].SecondArm.CurrentState : 0)deg);"><div></div></div>
            <span class="ctr"></span>
        </div>
        <div class="clock">
            <div class="hour" style="transform:rotate(@(controller != null ? controller.Clocks[6].FirstArm.CurrentState : 0)deg);"><div></div></div>
            <div class="minute" style="transform:rotate(@(controller != null ? controller.Clocks[6].SecondArm.CurrentState : 0)deg);"><div></div></div>
            <span class="ctr"></span>
        </div>
    </div>
</div>

@code {
    public delegate void UpdateStateCallback();
    Controller? controller;
	System.Threading.Timer timer;
	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

        controller = new Controller(StateHasChanged);

        timer = controller.timer;
	}

    public void TestFunction(object? stateInfo){
        Console.WriteLine("Test");
        StateHasChanged();
    }

    public static double ArmStateToDegree(ArmState state){
        switch(state){
            case ArmState.Zero:
                return 0.0;
            case ArmState.Three:
                return 90.0;
            case ArmState.Six:
                return 180.0;
            case ArmState.Nine:
                return 270.0;
            case ArmState.None:
                return 225.0;
            case ArmState.OnePointFive:
                return 45.0;
            default: return 0;
        }
    }

    public class Controller{
        
        private UpdateStateCallback updateStateCallback;
        public Dictionary<int, Clock> Clocks {get; private set;}
        public System.Threading.Timer timer {get; private set;}
        public Controller(UpdateStateCallback callback){
            
            updateStateCallback = callback;

            Clocks = new Dictionary<int, Clock>();
            
            for(var i=0; i<24; i++){
                Clocks.Add(i+1, new Clock(i+1));
            }

            SetClock(null);
		    
            timer = new System.Threading.Timer(SetClock, new System.Threading.AutoResetEvent(false), 0, 10); // 10 milliseconds
        }

        private void SetClock(object? stateInfo)
        {
            var time = DateTime.Now;

            for(var i=0; i<24; i++){
                switch(time.Second / 10){
                    case 0:
                        Clocks[1].UpdateState(ArmState.Three, ArmState.Six);
                        Clocks[4].UpdateState(ArmState.Nine, ArmState.Six);
                        Clocks[2].UpdateState(ArmState.Zero, ArmState.Six);
                        Clocks[5].UpdateState(ArmState.Zero, ArmState.Six);
                        Clocks[3].UpdateState(ArmState.Zero, ArmState.Three);
                        Clocks[6].UpdateState(ArmState.Zero, ArmState.Nine);
                        break;

                    case 1:
                        Clocks[1].UpdateState(ArmState.None, ArmState.None);
                        Clocks[4].UpdateState(ArmState.Zero, ArmState.Six);
                        Clocks[2].UpdateState(ArmState.None, ArmState.None);
                        Clocks[5].UpdateState(ArmState.Zero, ArmState.Six);
                        Clocks[3].UpdateState(ArmState.None, ArmState.None);
                        Clocks[6].UpdateState(ArmState.Zero, ArmState.Six);
                        break;
                    
                    case 2:
                        Clocks[1].UpdateState(ArmState.Three, ArmState.Three);
                        Clocks[4].UpdateState(ArmState.Nine, ArmState.Six);
                        Clocks[2].UpdateState(ArmState.Three, ArmState.Six);
                        Clocks[5].UpdateState(ArmState.Zero, ArmState.Nine);
                        Clocks[3].UpdateState(ArmState.Zero, ArmState.Three);
                        Clocks[6].UpdateState(ArmState.Nine, ArmState.Nine);
                        break;

                    case 3:
                        Clocks[1].UpdateState(ArmState.Three, ArmState.Three);
                        Clocks[4].UpdateState(ArmState.Nine, ArmState.Six);
                        Clocks[2].UpdateState(ArmState.Three, ArmState.Three);
                        Clocks[5].UpdateState(ArmState.Zero, ArmState.Six);
                        Clocks[3].UpdateState(ArmState.Three, ArmState.Three);
                        Clocks[6].UpdateState(ArmState.Zero, ArmState.Nine);
                        break;

                    case 4:
                        Clocks[1].UpdateState(ArmState.None, ArmState.None);
                        Clocks[4].UpdateState(ArmState.None, ArmState.Six);
                        Clocks[2].UpdateState(ArmState.OnePointFive, ArmState.Three);
                        Clocks[5].UpdateState(ArmState.Nine, ArmState.Zero);
                        Clocks[3].UpdateState(ArmState.None, ArmState.None);
                        Clocks[6].UpdateState(ArmState.Zero, ArmState.Six);
                        break;

                    case 5:
                        Clocks[1].UpdateState(ArmState.Three, ArmState.Six);
                        Clocks[4].UpdateState(ArmState.Nine, ArmState.Nine);
                        Clocks[2].UpdateState(ArmState.Zero, ArmState.Three);
                        Clocks[5].UpdateState(ArmState.Nine, ArmState.Six);
                        Clocks[3].UpdateState(ArmState.Three, ArmState.Three);
                        Clocks[6].UpdateState(ArmState.Zero, ArmState.Nine);
                        break;

                    case 6:
                        Clocks[1].UpdateState(ArmState.Three, ArmState.Six);
                        Clocks[4].UpdateState(ArmState.Nine, ArmState.Nine);
                        Clocks[2].UpdateState(ArmState.Zero, ArmState.Six);
                        Clocks[5].UpdateState(ArmState.Nine, ArmState.Six);
                        Clocks[3].UpdateState(ArmState.Zero, ArmState.Three);
                        Clocks[6].UpdateState(ArmState.Zero, ArmState.Nine);
                        break;

                    case 7:
                        Clocks[1].UpdateState(ArmState.Three, ArmState.Three);
                        Clocks[4].UpdateState(ArmState.Nine, ArmState.Six);
                        Clocks[2].UpdateState(ArmState.None, ArmState.None);
                        Clocks[5].UpdateState(ArmState.Zero, ArmState.Six);
                        Clocks[3].UpdateState(ArmState.None, ArmState.None);
                        Clocks[6].UpdateState(ArmState.Zero, ArmState.Six);
                        break;

                    case 8:
                        Clocks[1].UpdateState(ArmState.Three, ArmState.Six);
                        Clocks[4].UpdateState(ArmState.Nine, ArmState.Six);
                        Clocks[2].UpdateState(ArmState.Zero, ArmState.Three);
                        Clocks[5].UpdateState(ArmState.Zero, ArmState.Nine);
                        Clocks[3].UpdateState(ArmState.Zero, ArmState.Three);
                        Clocks[6].UpdateState(ArmState.Zero, ArmState.Nine);
                        break;

                    case 9:
                        Clocks[1].UpdateState(ArmState.Three, ArmState.Six);
                        Clocks[4].UpdateState(ArmState.Nine, ArmState.Six);
                        Clocks[2].UpdateState(ArmState.Zero, ArmState.Three);
                        Clocks[5].UpdateState(ArmState.Zero, ArmState.Six);
                        Clocks[3].UpdateState(ArmState.Three, ArmState.Three);
                        Clocks[6].UpdateState(ArmState.Zero, ArmState.Nine);
                        break;
                    default:
                        break;
                }
            }
            updateStateCallback(); // MUST CALL StateHasChanged() BECAUSE THIS IS TRIGGERED BY A TIMER INSTEAD OF A USER EVENT
        }
    }

    public class Clock{
        public int Id { get; private set; }
        public ClockArm FirstArm {get; private set; } = new ClockArm();
        public ClockArm SecondArm {get; private set; } = new ClockArm();       
        public Clock(int Id){
            this.Id = Id;
            FirstArm.CurrentState = 0.0;
            FirstArm.Config.Direction = Direction.Clockwise;
            SecondArm.CurrentState = 0.0;
            SecondArm.Config.Direction = Direction.Anticlockwise;
        }

        public void UpdateState(ArmState firstArmState, ArmState secondArmstate){
            if(FirstArm.CurrentState != ArmStateToDegree(firstArmState)){
                UpdateArmState(FirstArm);
            }
            if(SecondArm.CurrentState != ArmStateToDegree(secondArmstate)){
                UpdateArmState(SecondArm);
            }
        }

        private void UpdateArmState(ClockArm arm){
            Console.WriteLine($"Current State{arm.CurrentState}");
            arm.CurrentState = arm.Config.Direction == Direction.Clockwise ?
                    Math.Round(arm.CurrentState + 0.1, 2):
                    Math.Round(arm.CurrentState - 0.1, 2);
        }
    }

    public class ClockArm{
        private double _currentState;
        public double CurrentState{
            get{ return _currentState; } 
            set{_currentState = value > 0? value % 360.0 : (value + 360.0) % 360.0 ;}
        }
        public ArmConfig Config{get; set;} = new ArmConfig();
    }

    public class ArmConfig{
        public Direction Direction{get; set;} = Direction.Clockwise;
        public int MaxSpeed{get; private set;} = 3;
        public int Acceleration{get; private set;} = 2;
        public int Deceleration{get; private set;} = 2;
    }

    public enum Direction{
        Clockwise, 
        Anticlockwise
    }

    public enum ArmState{
        Zero, 
        Three,
        Six,
        Nine,
        None,
        OnePointFive
    }
}
@page "/"
@inject IJSRuntime JSRuntime;
@implements IDisposable;
@using Time.AnimationConfig;
@using Time.AnimationEngine;
@using Time.Components;

<div class="fullscreen-overlay" style="@(showFullscreenPrompt ? "display: flex;" : "display: none;")">
    <div class="fullscreen-prompt">
        <p>Enable fullscreen for a better experience</p>
        <div class="fullscreen-buttons">
            <button class="fullscreen-yes" @onclick="EnableFullscreen">Yes</button>
            <button class="fullscreen-no" @onclick="RejectFullscreen">No</button>
        </div>
    </div>
</div>

<div class="clocks-wrapper">
    @for (int j = 0; j < 8; j++)
    {
        <div class="clock-container">
            @for (int i = 1; i < 4; i++)
            {
                <div class="clock" @ref=ClockReference>
                    <div class="hour" @ref=HourReference>
                        <div></div>
                    </div>
                    <div class="minute" @ref=MinuteReference>
                        <div></div>
                    </div>
                    <span class="ctr"></span>
                </div>
            }
        </div>
    }
</div>

@code {
    Controller? controller;
    List<ElementReference> clockReferences = new List<ElementReference>();
    List<ElementReference> hourReferences = new List<ElementReference>();
    List<ElementReference> minuteReferences = new List<ElementReference>();
    ElementReference ClockReference
    {
        set { clockReferences.Add(value); }
    }
    ElementReference HourReference
    {
        set { hourReferences.Add(value); }
    }

    ElementReference MinuteReference
    {
        set { minuteReferences.Add(value); }
    }
    private bool showFullscreenPrompt = true;
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            controller = new Controller(JSRuntime, clockReferences, hourReferences, minuteReferences);
        }
    }
    public void Dispose()
    {
        controller?.Dispose();
    }
    public class Controller : IDisposable
    {
        private ChainedAnimationsManager chainedAnimationsManager;
        public Dictionary<int, Clock> Clocks { get; private set; }
        public Controller(IJSRuntime JSRuntime, List<ElementReference> clockReferences, List<ElementReference> hourReferences,
        List<ElementReference> minuteReferences)
        {
            Clocks = new Dictionary<int, Clock>();

            for (var i = 0; i < 24; i++)
                Clocks.Add(i + 1, new Clock(i + 1, hourReferences[i], minuteReferences[i]));

            JSRuntime.InvokeAsync<List<ElementReference>>("animationLoop.initShadows", clockReferences.ToArray());
            var orchestrator = new AnimationOrchestrator(JSRuntime, Clocks);
            chainedAnimationsManager = new ChainedAnimationsManager(orchestrator.GetNextAnimationManager());
        }

        public void SetClock()
        {
            chainedAnimationsManager.Start();
        }

        public void Dispose()
        {
            chainedAnimationsManager?.Dispose();
        }
    }

    private async Task EnableFullscreen()
    {
        showFullscreenPrompt = false;
        await JSRuntime.InvokeVoidAsync("animationInterop.requestFullscreen"); // Request fullscreen mode
        controller?.SetClock(); // Start clock animation after accepting fullscreen.
    }

    private void RejectFullscreen()
    {
        showFullscreenPrompt = false;
        controller?.SetClock();
        // Optionally, handle rejection logic here.
    }
}